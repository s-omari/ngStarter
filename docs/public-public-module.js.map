{"version":3,"sources":["webpack:///./src/app/modules/application/public/forgot-password-form/forgot-password-form.component.html","webpack:///./src/app/modules/application/public/forgot-password-form/forgot-password-form.component.scss","webpack:///./src/app/modules/application/public/forgot-password-form/forgot-password-form.component.ts","webpack:///./src/app/modules/application/public/login/login-form/login-form.component.html","webpack:///./src/app/modules/application/public/login/login-form/login-form.component.scss","webpack:///./src/app/modules/application/public/login/login-form/login-form.component.ts","webpack:///./src/app/modules/application/public/login/login.component.html","webpack:///./src/app/modules/application/public/login/login.component.scss","webpack:///./src/app/modules/application/public/login/login.component.ts","webpack:///./src/app/modules/application/public/public-routing.module.ts","webpack:///./src/app/modules/application/public/public.component.html","webpack:///./src/app/modules/application/public/public.component.scss","webpack:///./src/app/modules/application/public/public.component.ts","webpack:///./src/app/modules/application/public/public.module.ts","webpack:///./src/app/modules/application/public/reset-password/reset-password.component.html","webpack:///./src/app/modules/application/public/reset-password/reset-password.component.scss","webpack:///./src/app/modules/application/public/reset-password/reset-password.component.ts","webpack:///./src/app/modules/application/public/signup/signup.component.html","webpack:///./src/app/modules/application/public/signup/signup.component.scss","webpack:///./src/app/modules/application/public/signup/signup.component.ts","webpack:///./src/app/modules/application/shared-application/components/contact-us/contact-us.component.html","webpack:///./src/app/modules/application/shared-application/components/contact-us/contact-us.component.sass","webpack:///./src/app/modules/application/shared-application/components/contact-us/contact-us.component.ts"],"names":[],"mappings":"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","file":"public-public-module.js","sourcesContent":["module.exports = \"    <form #loginForm=\\\"ngForm\\\"  class=\\\"h-100\\\"  (ngSubmit)=\\\"resetPassword($event)\\\" [hidden]=\\\"isSubmitting || requestStatus == 'success' \\\">\\n      <div class=\\\"d-flex flex-column h-100\\\">\\n        <div *ngIf=\\\"requestStatus == 'invalid email'\\\" class=\\\"row py-2 justify-content-center align-items-center\\\">\\n            <h4 class=\\\"text-danger\\\"> This username is not linked to any account </h4>\\n        </div>\\n        <mat-form-field appearance=\\\"outline\\\" [floatLabel]=\\\"'always'\\\">\\n            <mat-label>Username / Email</mat-label>\\n              <input matInput [(ngModel)]=\\\"user.email\\\" (ngModelChange)=\\\"requestStatus=null\\\" placeholder=\\\"{{'universals.email' | translate}}\\\"\\n                type=\\\"text\\\" name=\\\"email\\\" #email=\\\"ngModel\\\" [pattern]=\\\"validationSer.patterns.email\\\" required>\\n            </mat-form-field>\\n            <form-validation [name]=\\\"email\\\" [errorMessages]=\\\"{'pattern':'Please enter a valid email address'}\\\">\\n            </form-validation>\\n        <div class=\\\"d-flex justify-content-between\\\">\\n            <button type=\\\"submit\\\" class=\\\"ml-auto\\\" [disabled]=\\\"loginForm.form.invalid\\\" mat-raised-button color=\\\"accent\\\">\\n                Reset Password\\n              </button>\\n        </div>\\n    <div class=\\\"flex-spacer\\\"></div>\\n    <a mat-button [routerLink]=\\\"['application/public/login']\\\"> <mat-icon>arrow_back</mat-icon> {{'signup.back' | translate}}</a>\\n      </div>\\n    </form>\\n    \\n    <div class=\\\"row text-xs-center justify-content-center align-items-center my-2 mx-2\\\" *ngIf=\\\"isSubmitting\\\">\\n      <mat-progress-spinner mode=\\\"indeterminate\\\"></mat-progress-spinner>\\n    </div>\\n\\n\\n    <div class=\\\"row text-xs-center justify-content-center align-items-center my-2 mx-2\\\" *ngIf=\\\"requestStatus == 'success'\\\">\\n      <div class=\\\"col\\\">\\n        <mat-icon class=\\\"success success-icon\\\" >check_circle_outline</mat-icon>\\n        <h2 class=\\\"success\\\">Password Reset Submitted , please check your email to reset you password</h2>\\n      </div>\\n    </div>\\n\"","module.exports = \".logo {\\n  height: 150px;\\n  width: auto; }\\n\\n.success-icon {\\n  font-size: 45px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9hcHBsaWNhdGlvbi9wdWJsaWMvZm9yZ290LXBhc3N3b3JkLWZvcm0vQzpcXFVzZXJzXFxzb21hclxcT25lRHJpdmVcXERlc2t0b3BcXHRlbXAgY2xlYW51cFxcQXBweFxcQW5ndWxhclN0YXJ0ZXJcXG5nU3RhcnRlci9zcmNcXGFwcFxcbW9kdWxlc1xcYXBwbGljYXRpb25cXHB1YmxpY1xcZm9yZ290LXBhc3N3b3JkLWZvcm1cXGZvcmdvdC1wYXNzd29yZC1mb3JtLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLFdBQVcsRUFBQTs7QUFHYjtFQUNFLGVBQWMsRUFBQSIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXBwbGljYXRpb24vcHVibGljL2ZvcmdvdC1wYXNzd29yZC1mb3JtL2ZvcmdvdC1wYXNzd29yZC1mb3JtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ28ge1xuICBoZWlnaHQ6IDE1MHB4O1xuICB3aWR0aDogYXV0bztcbn1cblxuLnN1Y2Nlc3MtaWNvbiB7XG4gIGZvbnQtc2l6ZTo0NXB4O1xufSJdfQ== */\"","import {PublicService} from '../public.service';\nimport { ValidationService } from '../../../../@core/services/validation.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\ninterface Iuser {\n  email: string;\n}\n\nclass User implements Iuser {\n  public email: string = null;\n  constructor() { }\n}\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password-form.component.html',\n  styleUrls: ['./forgot-password-form.component.scss']\n})\nexport class ForgotPasswordFormComponent implements OnInit {\n\n\n  user = new User();\n  invalidUsers = false;\n  requestStatus: string = null;\n  isSubmitting = false;\n\n  constructor(\n    public validationSer: ValidationService,\n    public publicService: PublicService\n  ) { }\n\n\n  ngOnInit() {\n  }\n\n  // Send a request to backend to send out a password reset email.\n  // Return UI message to user on success/fail\n  public resetPassword(e: Event) {\n    this.isSubmitting = true;\n    this.publicService.resetPassword(this.user).subscribe((res: Response) => {\n      this.requestStatus = 'success';\n    }, (error) => {\n      this.isSubmitting = false;\n      this.requestStatus = 'invalid email';\n      console.log(error.json());\n    }, () => {\n      this.isSubmitting = false;\n    });\n  }\n\n}\n","module.exports = \"\\n    <form #loginForm=\\\"ngForm\\\" class=\\\"h-100\\\" (ngSubmit)=\\\"login($event)\\\" [hidden]=\\\"isSubmitting\\\">\\n      <div class=\\\"d-flex flex-column h-100\\\">\\n        <div *ngIf=\\\"invalidCredentials\\\">\\n          <p class=\\\"text-danger\\\"> Invalid credentials , please ensure username and password are correct. </p>\\n        </div>\\n\\n        <mat-form-field appearance=\\\"outline\\\" [floatLabel]=\\\"'always'\\\" >\\n            <mat-label>Username / Email</mat-label>\\n            <input  matInput [(ngModel)]=\\\"credentials.email\\\" (ngModelChange)=\\\"invalidCredentials=false\\\" placeholder=\\\"{{'universals.email' | translate}}\\\"\\n              type=\\\"text\\\" name=\\\"email\\\" #email=\\\"ngModel\\\"  required>\\n          </mat-form-field>\\n          <!-- <form-validation [name]=\\\"email\\\" [errorMessages]=\\\"{'pattern':'Please enter a valid email address'}\\\">\\n          </form-validation> -->\\n\\n\\n          <mat-form-field  appearance=\\\"outline\\\" [floatLabel]=\\\"'always'\\\">\\n              <mat-label>Password</mat-label>\\n              <input matInput [(ngModel)]=\\\"credentials.password\\\" (ngModelChange)=\\\"invalidCredentials=false\\\" placeholder=\\\"{{'universals.password' | translate}}\\\"\\n                type=\\\"password\\\" name=\\\"password\\\" #password=\\\"ngModel\\\" required>\\n            </mat-form-field>\\n\\n\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <a mat-button [routerLink]=\\\"['/application/public/forgot-password']\\\">{{ 'login.forgotPassword' | translate }}</a>\\n            \\n                <button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"\\\" [disabled]=\\\"loginForm.form.invalid\\\" mat-raised-button color=\\\"accent\\\">\\n                    {{'login.title' | translate}}\\n                  </button>\\n            </div>\\n\\n\\n<div class=\\\"flex-spacer\\\"></div>\\n\\n<div class=\\\"flex-column justify-content-center align-items-center mt-2\\\">\\n    <p class=\\\"w-100\\\">Dont have an account?\\n   <button mat-button [routerLink]=\\\"['/application/public/sign-up']\\\">{{ 'welcomeNav.signup' | translate }}</button>\\n </p>\\n </div>\\n\\n      </div>\\n    </form>\\n    <div class=\\\"row text-xs-center justify-content-center align-items-center my-2 mx-2\\\" *ngIf=\\\"isSubmitting\\\">\\n      <mat-progress-spinner mode=\\\"indeterminate\\\"></mat-progress-spinner>\\n    </div>\\n\\n\"","module.exports = \".logo {\\n  height: 90px;\\n  width: auto; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9hcHBsaWNhdGlvbi9wdWJsaWMvbG9naW4vbG9naW4tZm9ybS9DOlxcVXNlcnNcXHNvbWFyXFxPbmVEcml2ZVxcRGVza3RvcFxcdGVtcCBjbGVhbnVwXFxBcHB4XFxBbmd1bGFyU3RhcnRlclxcbmdTdGFydGVyL3NyY1xcYXBwXFxtb2R1bGVzXFxhcHBsaWNhdGlvblxccHVibGljXFxsb2dpblxcbG9naW4tZm9ybVxcbG9naW4tZm9ybS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUNFLFlBQVk7RUFDWixXQUFXLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL2FwcGxpY2F0aW9uL3B1YmxpYy9sb2dpbi9sb2dpbi1mb3JtL2xvZ2luLWZvcm0uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbi5sb2dvIHtcbiAgaGVpZ2h0OiA5MHB4O1xuICB3aWR0aDogYXV0bztcbn1cbiJdfQ== */\"","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../../../../@core/services/user.service';\nimport {PublicService} from '../../public.service';\n\ninterface ICredentials {\n  email: string;\n  password: string;\n}\n\nclass Credentials implements ICredentials {\n  public email: string = null;\n  public password: string = null;\n\n  constructor(email?: string, password?: string) {\n    this.email = email ? email : null;\n    this.password = password ? password : null;\n  }\n}\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss']\n})\nexport class LoginFormComponent {\n  credentials = new Credentials();\n  invalidCredentials = false;\n  isSubmitting = false;\n\n  constructor(\n    private router: Router,\n    private userService: UserService,\n    public publicService: PublicService\n  ) {\n    console.log('login component constructor');\n  }\n\n  // Send login request to backend using login service\n  login() {\n    console.log(this.credentials);\n    // Display spinner while isSubmitting = true\n    this.isSubmitting = true;\n\n    this.publicService.login(this.credentials)\n      .subscribe((res) => {\n\n        // if (res) {\n        // const response = res;\n        // // store token if it is returned as a result of login\n        // this.userService.setToken(JSON.stringify(response.data.token));\n        // // store user data if returned as a result of login\n        // this.userService.setUser(response.data.user);\n        // }\n\n        // Set token and user data in localStorage on success\n        const encodedToken = btoa(this.credentials.email + ':' + this.credentials.password);\n        this.userService.setToken(encodedToken);\n\n        // redirect to restricted\n        this.router.navigate(['application/restricted']);\n      }, (error) => {\n        console.log('error' , error);\n        // hide spinner when isSubmitting = false\n        this.isSubmitting = false;\n        // display invalid credentials message\n        this.invalidCredentials = true;\n      });\n  }\n\n}\n","module.exports = \"<mat-card class=\\\"text-center login-card d-flex flex-column\\\" color=\\\"primary\\\">\\n    <mat-progress-bar mode=\\\"indeterminate\\\" color=\\\"accent\\\" *ngIf=\\\"loadingRoute\\\">\\n      </mat-progress-bar>\\n   \\n<div class=\\\"brand m-3 p-3\\\">\\n    <div class=\\\"logo\\\">ngStarter</div>\\n</div>\\n\\n\\n\\n    <mat-card-content class=\\\"login-card-content\\\">\\n  <router-outlet ></router-outlet>\\n  \\n    </mat-card-content>\\n  </mat-card>\\n  \\n  <div class=\\\"d-flex justify-contents-center\\\" style=\\\"background-color:transparent;\\\">\\n      <!-- <button mat-button (click)=\\\"goBack()\\\"><mat-icon>arrow_back</mat-icon> back</button> -->\\n\\n      <div class=\\\"d-flex align-items-center\\\">\\n        <language-switcher></language-switcher>\\n        <!-- <theme-switcher [selectedTheme]=\\\"appService.appTheme\\\" (onSelectTheme)=\\\"appService.setTheme($event)\\\"></theme-switcher> -->\\n      </div>\\n    </div>\\n<!--   \\n  <div style=\\\"color:grey;\\\" class=\\\"mt-4\\\">\\n    <p class=\\\"p-0 m-0\\\">Username: postman</p>\\n    <p class=\\\"p-0  m-0\\\">Password: password</p>\\n  </div> -->\"","module.exports = \".login-card {\\n  margin: 67px 0 5px 0;\\n  min-height: 77%;\\n  width: 390px;\\n  padding: 0px;\\n  overflow: hidden; }\\n\\n.login-card-content {\\n  padding: 23px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9hcHBsaWNhdGlvbi9wdWJsaWMvbG9naW4vQzpcXFVzZXJzXFxzb21hclxcT25lRHJpdmVcXERlc2t0b3BcXHRlbXAgY2xlYW51cFxcQXBweFxcQW5ndWxhclN0YXJ0ZXJcXG5nU3RhcnRlci9zcmNcXGFwcFxcbW9kdWxlc1xcYXBwbGljYXRpb25cXHB1YmxpY1xcbG9naW5cXGxvZ2luLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksb0JBQW9CO0VBQ3BCLGVBQWU7RUFDZixZQUFZO0VBQ1osWUFBWTtFQUNaLGdCQUFnQixFQUFBOztBQUdwQjtFQUNJLGFBQWEsRUFBQSIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXBwbGljYXRpb24vcHVibGljL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ2luLWNhcmQge1xyXG4gICAgbWFyZ2luOiA2N3B4IDAgNXB4IDA7XHJcbiAgICBtaW4taGVpZ2h0OiA3NyU7XHJcbiAgICB3aWR0aDogMzkwcHg7XHJcbiAgICBwYWRkaW5nOiAwcHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG59XHJcblxyXG4ubG9naW4tY2FyZC1jb250ZW50IHtcclxuICAgIHBhZGRpbmc6IDIzcHg7XHJcbiAgICAvLyBoZWlnaHQ6IDc3dmg7XHJcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, Event, NavigationStart, NavigationEnd } from '@angular/router';\nimport {PublicService} from '../public.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loadingRoute: boolean;\n\n  constructor(\n    private router: Router,\n    public publicService: PublicService\n  ) {\n          // show/hide  progress bar on route change\n          this.router.events.subscribe((event: Event) => {\n            if (event instanceof NavigationStart) {\n              this.loadingRoute = true;\n            } else if (event instanceof NavigationEnd) {\n              this.loadingRoute = false;\n            }\n          });\n  }\n\n\n  ngOnInit() {\n  }\n\n}\n","import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n// Routing components\nimport { ContactUsComponent } from '../shared-application/components/contact-us/contact-us.component';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { ForgotPasswordFormComponent } from './forgot-password-form/forgot-password-form.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { LoginFormComponent} from './login/login-form/login-form.component'\nimport { PublicComponent } from './public.component';\nexport const RoutingComponents = [\n  PublicComponent,\n  LoginComponent,\n  SignupComponent,\n  ForgotPasswordFormComponent,\n  ResetPasswordComponent,\n  ContactUsComponent\n];\n\n\nconst routes: Routes = [\n  {\n    path: '', component: PublicComponent,\n    children: [\n      { path: '', redirectTo: 'login', pathMatch: 'prefix' },\n      { path: 'login', component: LoginComponent , children: [\n      { path: '', component: LoginFormComponent },\n      // {path:'forgot-password'}\n      { path: 'forgot-password', component: ForgotPasswordFormComponent },\n\n\n      ]},\n      { path: 'sign-up', component: SignupComponent },\n      { path: 'password/reset/:token', component: ResetPasswordComponent },\n      { path: 'contact-us', component: ContactUsComponent }\n    ]\n  }];\n\nexport const router: ModuleWithProviders = RouterModule.forChild(routes);\n","module.exports = \"<section class=\\\"container-fluid h-100 \\\">\\n  <div class=\\\"row h-100 justify-content-center \\\">\\n\\n\\n    <!-- <div color=\\\"primary\\\" class=\\\"col-10 col-md-6 col-lg-4\\\">\\n    </div> -->\\n    <router-outlet ></router-outlet>\\n\\n        <!-- <mat-toolbar style=\\\"background-color:transparent;\\\">\\n      <button mat-button (click)=\\\"goBack()\\\"><mat-icon>arrow_back</mat-icon> back</button>\\n\\n      <div class=\\\"ml-auto d-flex align-items-center\\\">\\n        <language-switcher></language-switcher>\\n        <theme-switcher [selectedTheme]=\\\"appService.appTheme\\\" (onSelectTheme)=\\\"appService.setTheme($event)\\\"></theme-switcher>\\n      </div>\\n    </mat-toolbar> -->\\n  </div>\\n</section>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXBwbGljYXRpb24vcHVibGljL3B1YmxpYy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AppService } from '../../../@core/services/app.service';\n\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'public',\n  templateUrl: './public.component.html',\n  styleUrls: ['./public.component.scss']\n})\nexport class PublicComponent implements OnInit {\n  language = 'en';\n\n  constructor(\n    public translate: TranslateService,\n    public appService: AppService,\n    private location: Location\n  ) {\n    translate.use(this.language);\n  }\n\n  goBack() {\n    this.location.back();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../../shared/shared.module';\nimport {SharedApplicationModule} from '../shared-application/shared-application.module'\nimport { FormsModule } from '@angular/forms';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { router, RoutingComponents } from './public-routing.module';\n\n\n\n// Services\n// import { LoginService } from './login/login.service';\n// import { SignupService } from './signup/signup.service';\n// import { ForgotPasswordService } from './forgot-password-form/forgot-password.service';\n// import { ResetPasswordService } from './reset-password/reset-password.service';\nimport { LoginFormComponent } from './login/login-form/login-form.component';\nimport { LoginComponent } from './login/login.component';\n\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    router,\n    SharedModule,\n    SharedApplicationModule,\n    // HttpModule,\n    FormsModule,\n    // HttpClientModule\n  ],\n  declarations: [\n    RoutingComponents,\n    LoginFormComponent,\n    LoginComponent,\n  ],\n  providers: [\n    // LoginService,\n    // SignupService,\n    // ResetPasswordService,\n    // ForgotPasswordService,\n  ] , \n  exports: [\n    SharedModule\n  ]\n})\nexport class PublicModule { }\n","module.exports = \"<div class=\\\"logo mb-5\\\">ngStarter</div>\\n\\n\\n<mat-card class=\\\"text-center p-5\\\">\\n  <mat-card-content>\\n    <form #resetPassForm=\\\"ngForm\\\" (ngSubmit)=\\\"updatePassword()\\\" [hidden]=\\\"isSubmitting\\\" [formGroup]=\\\"form\\\">\\n      <div class=\\\"container\\\">\\n\\n        <!-- <div class=\\\"row justify-content-center align-items-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <mat-form-field>\\n              <input matInput [(ngModel)]=\\\"user.email\\\" placeholder=\\\"Email Address\\\" type=\\\"email\\\" name=\\\"email\\\" #email=\\\"ngModel\\\"\\n                [pattern]=\\\"validationSer.patterns.email\\\" required>\\n            </mat-form-field>\\n            <form-validation [name]=\\\"email\\\" [errorMessages]=\\\"{'email':'Email should be a valid mail'}\\\">\\n            </form-validation>\\n          </div>\\n        </div> -->\\n\\n        <!-- <div class=\\\"row justify-content-center align-items-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <mat-form-field>\\n              <input matInput [(ngModel)]=\\\"user.password\\\" placeholder=\\\"New Password\\\" type=\\\"password\\\" name=\\\"password\\\"\\n                #password=\\\"ngModel\\\" [pattern]=\\\"validationSer.patterns.password\\\" required>\\n            </mat-form-field>\\n            <form-validation [name]=\\\"password\\\" [errorMessages]=\\\"{'pattern':'Password must contain at least one uppercase character, one lowercase character and one number'}\\\">\\n            </form-validation>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"row justify-content-center align-items-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <mat-form-field>\\n              <input matInput [(ngModel)]=\\\"user.password_confirmation\\\" placeholder=\\\"Repeat Password\\\" type=\\\"password\\\"\\n                name=\\\"repeatPassword\\\" #repeatPassword=\\\"ngModel\\\" required>\\n            </mat-form-field>\\n            <form-validation [name]=\\\"repeatPassword\\\" [errorMessages]=\\\"{'pattern':'PASSWORD_MATCH'}\\\">\\n            </form-validation>\\n          </div>\\n        </div> -->\\n\\n\\n\\n        <div class=\\\"row justify-content-center align-items-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <mat-form-field>\\n              <!-- <input matInput [(ngModel)]=\\\"user.email\\\" placeholder=\\\"Email Address\\\" type=\\\"email\\\" name=\\\"email\\\" #email=\\\"ngModel\\\"\\n                [pattern]=\\\"validationSer.patterns.email\\\" required> -->\\n              <input matInput placeholder=\\\"Email Address\\\" formControlName=\\\"email\\\" />\\n\\n            </mat-form-field>\\n            <!-- <form-validation [name]=\\\"email\\\" [errorMessages]=\\\"{'email':'Email should be a valid mail'}\\\">\\n            </form-validation> -->\\n            <!-- <span class=\\\"text-danger\\\" *ngIf=\\\"errors.email\\\">\\n              {{ errors.email }}\\n            </span> -->\\n\\n            <!-- <mat-error *ngIf=\\\"form.controls.email.invalid && form.controls.email.errors.required\\\">\\n              Email Field is required\\n            </mat-error> -->\\n            <mat-error *ngIf=\\\"form.controls.email.invalid && form.controls.email.errors.pattern\\\">\\n              Enter a valid Email\\n            </mat-error>\\n\\n          </div>\\n        </div>\\n\\n\\n        <div class=\\\"row justify-content-center align-items-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"New Password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" required />\\n            </mat-form-field>\\n            <br>\\n            <span class=\\\"text-danger\\\" *ngIf=\\\"errors.password\\\">\\n              {{ errors.password }}\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"row justify-content-center align-items-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <mat-form-field>\\n              <input matInput placeholder=\\\"Confirm New Password\\\" type=\\\"password\\\" formControlName=\\\"confirmPassword\\\"\\n                required />\\n            </mat-form-field>\\n            <br>\\n            <span class=\\\"text-danger\\\" *ngIf=\\\"errors.confirmPassword\\\">\\n              {{ errors.confirmPassword }}\\n            </span>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"row justify-content-center align-items-center mt-2\\\">\\n          <div class=\\\"col-xs text-xs-center\\\">\\n            <button type=\\\"submit\\\" [disabled]=\\\"resetPassForm.form.invalid\\\" mat-raised-button color=\\\"accent\\\">\\n              Update Your Password\\n            </button>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"row justify-content-center align-items-center mt-3\\\">\\n          <div class=\\\"col\\\">\\n            <a mat-button [routerLink]=\\\"['application/public/login']\\\">Back to login</a>\\n          </div>\\n        </div>\\n      </div>\\n    </form>\\n    <div class=\\\"row text-xs-center justify-content-center align-items-center my-2 mx-2\\\" *ngIf=\\\"isSubmitting\\\">\\n      <mat-progress-spinner mode=\\\"indeterminate\\\"></mat-progress-spinner>\\n    </div>\\n  </mat-card-content>\\n</mat-card>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXBwbGljYXRpb24vcHVibGljL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIn0= */\"","import { ValidationService } from '../../../../@core/services/validation.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\n\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport {PublicService} from '../public.service';\n\n\n// import { errorMessages, errors } from './form-errors';\nimport { PasswordValidation } from '../../../../@core/form-validation/password.validator';\n// import { ChangePasswordService } from './change-password.service';\n\n\nconst errors = {\n  email: '',\n  password: '',\n  confirmPassword: ''\n};\n\nconst errorMessages = {\n  email: {\n    required: 'Email Field is Required',\n    // emailPattern: 'Enter a valid email Address'\n  },\n  password: {\n    required: 'New Password Field is Required',\n    minlength: 'New Password field mst be 6 or more characters',\n    passwordPattern: 'Password must contain one uppercase character, one lowercase character and one number'\n  },\n  confirmPassword: {\n    required: 'New Password Field is Required',\n    confirmPassword: 'Please ensure passwords match',\n  }\n};\n\n\ninterface Iuser {\n  email: string;\n  password: string;\n  password_confirmation: string;\n}\n\nclass User implements Iuser {\n  public email: string = null;\n  public password: string = null;\n  public password_confirmation: string = null;\n  constructor() { }\n}\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n  user = new User();\n  accessToken = null;\n  isSubmitting = false;\n  repeatPasswordModel: any;\n\n\n  // isSubmitting = false;\n  form: FormGroup;\n\n  errors = errors;\n  errorMessages = errorMessages;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    public validationSer: ValidationService,\n    private snackbar: MatSnackBar,\n    private formBuilder: FormBuilder,\n    public publicService: PublicService\n    // private changePasswordService: ChangePasswordService,\n  ) {\n    // Fetch the route params' token that is the unique one given through the password reset email link\n    route.params\n      .subscribe(params => {\n        this.accessToken = params;\n      });\n  }\n\n  ngOnInit() {\n    this.buildForm();\n    this.form.valueChanges.subscribe(data => this.validateForm());\n  }\n\n  // Change password function\n  public updatePassword() {\n\n\n    // const data = {\n    //   email: this.form.get('old').value,\n    //   password: this.form.get('password').value,\n    //   password_confirmation: this.form.get('confirmPassword').value\n    // };\n    const user = {\n      'email': this.form.get('email').value,\n      'password': this.form.get('password').value,\n      'password_confirmation': this.form.get('confirmPassword').value,\n      // 'token': this.accessToken.token\n    };\n    // console.log(user);\n    // console.log('this.user', this.user);\n    // console.log('this.accessToken', this.accessToken);\n\n\n    this.isSubmitting = true;\n    // Feed backend function call the user object from the form template (email, password and new password)\n    // and the token from the email link for authentication\n    this.publicService.changePassword(user, this.accessToken)\n      .subscribe((res: Response) => {\n        this.isSubmitting = false;\n        // Show snackbar dialog on success and redirect to login\n        this.snackbar.open('Password has been updated successfully', null, {\n          duration: 5000\n        });\n        this.router.navigate(['restricted/login']);\n      }, (error) => {\n        this.isSubmitting = false;\n      });\n  }\n\n\n\n  buildForm() {\n    this.form = this.formBuilder.group({\n      email: [this.user.email, Validators.compose([Validators.required, Validators.pattern(this.validationSer.patterns.email)])],\n      password: [this.user.password, Validators.compose([Validators.required, Validators.minLength(6)])],\n      confirmPassword: [this.user.password_confirmation, Validators.compose([Validators.required])]\n    }, {\n        validator: Validators.compose([\n          PasswordValidation.confirmPassword,\n          PasswordValidation.passwordPattern\n        ])\n      });\n  }\n\n  validateForm() {\n    for (const field in this.errors) {\n      this.errors[field] = '';\n      const input = this.form.get(field);\n      if (input.invalid && input.dirty) {\n        for (const error in input.errors) {\n          this.errors[field] = this.errorMessages[field][error];\n        }\n      } else { console.log(input); }\n    }\n\n  }\n\n  // changePassword(event: any) {\n  //   const data = {\n  //     old_password: this.form.get('old').value,\n  //     password: this.form.get('password').value,\n  //     password_confirmation: this.form.get('confirmPassword').value\n  //   };\n\n  //   this.isSubmitting = true;\n  //   this.changePasswordService.changePassword(data)\n  //     .subscribe((response: any) => {\n  //       this.isSubmitting = false;\n  //       if (response.data) {\n  //         this.matSnackBar.open('Password has Changed Successfully', null, {\n  //           duration: 3000\n  //         });\n  //         this.goBack();\n  //       }\n  //     }, error => {\n  //       this.isSubmitting = false;\n  //       this.matSnackBar.open('Something went wrong, please ensure your old password is correct', null, {\n  //         duration: 3000\n  //       });\n  //     });\n  // }\n\n\n}\n","module.exports = \"<mat-card class=\\\"text-center p-5 signup-card\\\">\\n  <!-- <mat-icon class=\\\"px-5 mb-2\\\" [hidden]=\\\"isSubmitting || requestStatus\\\">\\n    account_circle </mat-icon> -->\\n\\n       \\n<div class=\\\"brand\\\">\\n    <div class=\\\"logo\\\">ngStarter</div>\\n</div>\\n\\n  <mat-card-content class=\\\"signup-card-content\\\">\\n    <h2 mat-dialog-title [hidden]=\\\"user.id!=null\\\">{{'signup.add' | translate}}</h2>\\n\\n    <form #userForm=\\\"ngForm\\\" (ngSubmit)=\\\"signUp($event)\\\" [hidden]=\\\"isSubmitting || requestStatus\\\">\\n      <div class=\\\"d-flex justify-content-center align-items-center\\\">\\n        <mat-form-field appearance=\\\"outline\\\" [floatLabel]=\\\"'always'\\\">\\n          <mat-label>First Name</mat-label>\\n          <input matInput name=\\\"firstName\\\" required>\\n        </mat-form-field>\\n\\n        <mat-form-field appearance=\\\"outline\\\" [floatLabel]=\\\"'always'\\\">\\n          <mat-label>Last Name</mat-label>\\n          <input matInput name=\\\"lastName\\\" required>\\n        </mat-form-field>\\n      </div>\\n      <mat-form-field appearance=\\\"outline\\\" [floatLabel]=\\\"'always'\\\">\\n        <mat-label>Email</mat-label>\\n        <input matInput [(ngModel)]=\\\"user.email\\\" placeholder=\\\"{{'universals.email' | translate}}\\\" type=\\\"email\\\"\\n          name=\\\"email\\\" #email=\\\"ngModel\\\" required [pattern]=\\\"validationService.patterns.email\\\">\\n      </mat-form-field>\\n      <form-validation [name]=\\\"email\\\" [errorMessages]=\\\"{'pattern':'Please enter a valid email address'}\\\">\\n      </form-validation>\\n \\n      <h4 *ngIf=\\\"requestStatus == 'email already exists'\\\" class=\\\"text-danger\\\"> This email is already registered </h4>\\n          \\n\\n      <div class=\\\"d-flex justify-content-center align-items-center\\\">\\n\\n        <mat-form-field appearance=\\\"outline\\\" [floatLabel]=\\\"'always'\\\">\\n          <mat-label>Password</mat-label>\\n\\n          <input matInput [(ngModel)]=\\\"user.password\\\" placeholder=\\\"{{'universals.password' | translate}}\\\"\\n            type=\\\"password\\\" name=\\\"password\\\" #password=\\\"ngModel\\\" [pattern]=\\\"validationService.patterns.password\\\" required>\\n        </mat-form-field>\\n\\n        <mat-form-field appearance=\\\"outline\\\" [floatLabel]=\\\"'always'\\\">\\n          <mat-label>Confirm</mat-label>\\n          <input matInput [(ngModel)]=\\\"user.password_confirmation\\\"\\n            placeholder=\\\"{{'universals.passwordConfirm' | translate}}\\\" type=\\\"password\\\" name=\\\"password_confirmation\\\"\\n            #password_confirmation=\\\"ngModel\\\" [pattern]=\\\"user.password\\\" required>\\n        </mat-form-field>\\n\\n        <div class=\\\"d-flex flex-column\\\">\\n          <form-validation [name]=\\\"password\\\"\\n            [errorMessages]=\\\"{'pattern':'Password must contain at least one uppercase character, one lowercase character and one number'}\\\">\\n          </form-validation>\\n          <form-validation [name]=\\\"password_confirmation\\\"\\n            [errorMessages]=\\\"{'pattern':'Please ensure passwords match '}\\\">\\n          </form-validation>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n        <a mat-button [routerLink]=\\\"['application/public/login']\\\">{{'signup.back' | translate}}</a>\\n        <button type=\\\"submit\\\" [disabled]=\\\"userForm.form.invalid\\\" mat-raised-button color=\\\"accent\\\">\\n          {{'signup.create' | translate}}\\n        </button>\\n      </div>\\n\\n    </form>\\n\\n    <div class=\\\"row text-xs-center justify-content-center align-items-center my-5 mx-5\\\" *ngIf=\\\"isSubmitting\\\">\\n      <mat-progress-spinner mode=\\\"indeterminate\\\"></mat-progress-spinner>\\n    </div>\\n\\n\\n    <div class=\\\"row text-xs-center justify-content-center align-items-center my-2 mx-2\\\"\\n      *ngIf=\\\"requestStatus == 'success'\\\">\\n      <div class=\\\"col-12\\\">\\n        <mat-icon class=\\\"success\\\" style=\\\"font-size:48px\\\">thumb_up</mat-icon>\\n        <h2 class=\\\"success\\\">Check your email for verification</h2>\\n      </div>\\n      <div class=\\\"col\\\">\\n        <a mat-button [routerLink]=\\\"['application/public/login']\\\">Login</a>\\n      </div>\\n    </div>\\n    <div *ngIf=\\\"requestStatus == 'invalid email'\\\" class=\\\"row py-2 justify-content-center align-items-center\\\">\\n      <div class=\\\"col\\\">\\n        <h4 class=\\\"text-danger\\\"> This email is already registered </h4>\\n      </div>\\n      <div class=\\\"row justify-content-center align-items-center mt-3\\\">\\n        <div class=\\\"col\\\">\\n          <a mat-button [routerLink]=\\\"['/public/forgot-password']\\\">Forgot your password?</a>\\n        </div>\\n      </div>\\n    </div>\\n\\n\\n  </mat-card-content>\\n</mat-card>\\n\\n<div class=\\\"d-flex justify-contents-center\\\" style=\\\"background-color:transparent;\\\">\\n    <!-- <button mat-button (click)=\\\"goBack()\\\"><mat-icon>arrow_back</mat-icon> back</button> -->\\n\\n    <div class=\\\"d-flex align-items-center\\\">\\n      <language-switcher></language-switcher>\\n      <!-- <theme-switcher [selectedTheme]=\\\"appService.appTheme\\\" (onSelectTheme)=\\\"appService.setTheme($event)\\\"></theme-switcher> -->\\n    </div>\\n  </div>\"","module.exports = \".signup-card {\\n  margin: 67px 0 5px 0;\\n  min-height: 77%;\\n  width: 500px;\\n  padding: 0px;\\n  overflow: hidden; }\\n\\n.signup-card-content {\\n  padding: 23px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9hcHBsaWNhdGlvbi9wdWJsaWMvc2lnbnVwL0M6XFxVc2Vyc1xcc29tYXJcXE9uZURyaXZlXFxEZXNrdG9wXFx0ZW1wIGNsZWFudXBcXEFwcHhcXEFuZ3VsYXJTdGFydGVyXFxuZ1N0YXJ0ZXIvc3JjXFxhcHBcXG1vZHVsZXNcXGFwcGxpY2F0aW9uXFxwdWJsaWNcXHNpZ251cFxcc2lnbnVwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksb0JBQW9CO0VBQ3BCLGVBQWU7RUFDZixZQUFZO0VBQ1osWUFBWTtFQUNaLGdCQUFnQixFQUFBOztBQUdwQjtFQUNJLGFBQWEsRUFBQSIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXBwbGljYXRpb24vcHVibGljL3NpZ251cC9zaWdudXAuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc2lnbnVwLWNhcmQge1xyXG4gICAgbWFyZ2luOiA2N3B4IDAgNXB4IDA7XHJcbiAgICBtaW4taGVpZ2h0OiA3NyU7XHJcbiAgICB3aWR0aDogNTAwcHg7XHJcbiAgICBwYWRkaW5nOiAwcHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG59XHJcblxyXG4uc2lnbnVwLWNhcmQtY29udGVudCB7XHJcbiAgICBwYWRkaW5nOiAyM3B4O1xyXG4gICAgLy8gaGVpZ2h0OiA3N3ZoO1xyXG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { ValidationService } from '../../../../@core/services/validation.service';\nimport { Iuser, User } from '../../../../@core/models/user.model';\n\nimport {PublicService} from '../public.service';\n\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\n\nexport class SignupComponent implements OnInit {\n  user: Iuser;\n  requestStatus: string = null;\n  isSubmitting = false;\n\n  constructor(\n    // private signupService: SignupService,\n    public validationService: ValidationService,\n    public publicService: PublicService) {\n    this.user = new User();\n  }\n  ngOnInit() {\n  }\n\n  signUp(e: any) {\n    this.isSubmitting = true;\n    this.publicService.signUp(this.user)\n      .subscribe((res: Response) => {\n        this.isSubmitting = false;\n        this.requestStatus = 'success';\n      }, (error) => {\n        this.isSubmitting = false;\n        this.requestStatus = 'email already exists';\n        const errors = error.json().errors;\n\n        // log all returned error messages to console\n        const errorsArray = [];\n        for (const errorText in errors) {\n          if (errors.hasOwnProperty(errorText)) {\n            errorsArray.push(errors[errorText]);\n          }\n        }\n        errorsArray.map(err => {\n          console.log(err);\n        });\n      }, () => {\n        this.isSubmitting = false;\n      });\n  }\n}\n","module.exports = \"<mat-card style=\\\"margin-top:100px\\\" class=\\\"text-center p-5\\\" color=\\\"primary\\\" [hidden]=\\\"isSubmitting || requestStatus\\\">\\n  <i style=\\\"font-size:55px;\\\" class=\\\"px-5 mb-2 material-icons\\\" [hidden]=\\\"isSubmitting || requestStatus\\\"> email </i>\\n  <h5>Contact Us</h5>\\n  <mat-card-content>\\n    <form #updateForm=\\\"ngForm\\\" (ngSubmit)=\\\"contactUs($event)\\\" [hidden]=\\\"isSubmitting\\\">\\n      <div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center align-items-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <mat-form-field>\\n              <input matInput [(ngModel)]=\\\"mail.userEmail\\\" (ngModelChange)=\\\"invalidCredentials=false\\\" placeholder=\\\"Email\\\"\\n                type=\\\"text\\\" name=\\\"userEmail\\\" #userEmail=\\\"ngModel\\\" [pattern]=\\\"validationSer.patterns.email\\\" required>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"row justify-content-center align-items-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <mat-form-field>\\n              <input matInput [(ngModel)]=\\\"mail.subject\\\" (ngModelChange)=\\\"invalidCredentials=false\\\" placeholder=\\\"Subject\\\"\\n                type=\\\"text\\\" name=\\\"subject\\\" #subject=\\\"ngModel\\\" required>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"row justify-content-center align-items-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <mat-form-field>\\n              <textarea matInput [(ngModel)]=\\\"mail.body\\\" placeholder=\\\"Message\\\" type=\\\"text\\\" name=\\\"body\\\" #body=\\\"ngModel\\\"\\n                required></textarea>\\n            </mat-form-field>\\n          </div>\\n        </div>\\n        <div class=\\\"row justify-content-center align-items-center mt-2\\\">\\n          <div class=\\\"col-xs text-xs-center\\\">\\n            <button type=\\\"submit\\\" [disabled]=\\\"updateForm.form.invalid\\\" mat-raised-button color=\\\"accent\\\">\\n              Send\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n    </form>\\n    <div class=\\\"row text-xs-center justify-content-center align-items-center my-2 mx-2\\\" *ngIf=\\\"isSubmitting\\\">\\n      <mat-progress-spinner mode=\\\"indeterminate\\\"></mat-progress-spinner>\\n    </div>\\n    <mat-card-actions>\\n      <div class=\\\"row justify-content-center align-items-center mt-2\\\">\\n        <div class=\\\"col-xs text-xs-center\\\">\\n          <button type=\\\"submit\\\" mat-raised-button color=\\\"accent\\\" (click)=\\\"goBack()\\\">\\n            Back\\n          </button>\\n        </div>\\n      </div>\\n    </mat-card-actions>\\n  </mat-card-content>\\n</mat-card>\\n<!-- Logically display based on success of async call -->\\n<mat-card>\\n  <div class=\\\"row text-xs-center justify-content-center align-items-center my-2 mx-2\\\" *ngIf=\\\"requestStatus == 'success'\\\">\\n    <div class=\\\"col-12 text-center\\\">\\n      <mat-icon class=\\\"success\\\" style=\\\"font-size:48px\\\">thumb_up</mat-icon>\\n      <h2 class=\\\"success\\\">Mail successfully sent! Someone will be in contact with you shortly.</h2>\\n    </div>\\n    <div class=\\\"col-12 text-center\\\">\\n      <a mat-button [routerLink]=\\\"['/']\\\">Back</a>\\n    </div>\\n  </div>\\n</mat-card>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXBwbGljYXRpb24vc2hhcmVkLWFwcGxpY2F0aW9uL2NvbXBvbmVudHMvY29udGFjdC11cy9jb250YWN0LXVzLmNvbXBvbmVudC5zYXNzIn0= */\"","import { ValidationService } from './../../../../../@core/services/validation.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-contact-us',\n  templateUrl: './contact-us.component.html',\n  styleUrls: ['./contact-us.component.sass']\n})\nexport class ContactUsComponent implements OnInit {\n  mail: any = {\n    userEmail: '',\n    subject: '',\n    body: ''\n  };\n  isSubmitting = false;\n  requestStatus: string;\n\n  constructor(\n    public validationSer: ValidationService,\n    private location: Location\n  ) { }\n\n  ngOnInit() {\n  }\n\n  /**\n   * Simple navigator to return to whichever page the user was on last\n   */\n\n  goBack() {\n    this.location.back();\n  }\n\n  /**\n   * Insert API call (POST) request here, set isSubmitting to true while waiting for async call to return\n   * Set requestStatus to 'success' upon 200 request status returned\n   */\n\n  contactUs() {\n    console.log(this.mail);\n    setTimeout(() => {\n      this.isSubmitting = true;\n    }, 2000);\n    this.requestStatus = 'success';\n  }\n\n}\n"],"sourceRoot":""}