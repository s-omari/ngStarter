{"version":3,"sources":["webpack:///./src/app/@core/form-validation/password.validator.ts","webpack:///./src/app/@core/models/user.model.ts","webpack:///./src/app/@core/services/app.service.ts","webpack:///./src/app/@core/services/validation.service.ts","webpack:///./src/app/modules/anappro/shared-anappro/services/projects.service.ts","webpack:///./src/app/modules/application/public/public.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { AbstractControl } from '@angular/forms';\n\nexport class PasswordValidation {\n\n    /**\n     * Compare password against password confirmation.\n     */\n    static confirmPassword(AC: AbstractControl): any {\n        if (AC.get('password').value !== AC.get('confirmPassword').value) {\n            AC.get('confirmPassword').setErrors({ confirmPassword: true });\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Make sure password matches a specific pattern.\n     */\n    static passwordPattern(AC: AbstractControl): any {\n        const pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*$/;\n        if (!pattern.test(AC.get('password').value)) {\n            AC.get('password').setErrors({ passwordPattern: true });\n            return false;\n        }\n\n        return true;\n    }\n\n}\n","export interface Iuser {\n    first_name?: string;\n    last_name?: string;\n    email: string;\n    phone_number?: string;\n    lang?: string;\n    password?: string;\n    password_confirmation?: string;\n    emailVerified?: boolean;\n    id?: any;\n}\n\nexport class User implements Iuser {\n    first_name: string;\n    last_name: string;\n    email: string;\n    phone_number?: string;\n\n    constructor() {\n        this.first_name = null;\n        this.last_name = null;\n        this.email = null;\n        this.phone_number = null;\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n\n  public appTheme: string;\n\n  constructor() {\n    if (localStorage.getItem('appTheme')) {\n      this.appTheme = (localStorage.getItem('appTheme'));\n    } else {\n      this.appTheme = 'purple-theme';\n    }\n  }\n  setTheme(theme: string) {\n    this.appTheme = theme;\n    localStorage.setItem('appTheme', theme);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n  public patterns: {\n    email: RegExp;\n    password: RegExp;\n    phone_number: RegExp;\n  };\n\n  // Regular expressions to match against user input for specific fields\n  // Testable at https://regex101.com/\n  constructor() {\n    this.patterns = {\n      // Make sure email is broken into two strings by '@' symbol, and is ended by a valid top level domain\n      // tslint:disable-next-line:max-line-length\n      email: /^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|ca|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i,\n      // Make sure password contains at least one lowercase character, one uppercase character and one numerical or special character\n      password: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*$/,\n      // Check phone number is equal to this format: (***)***-****\n      phone_number: /^\\(?([0-9]{3})\\)?[-.]?([0-9]{3})[-.]?([0-9]{4})$/\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as mockData from '../../mock-data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectsService {\n\n  constructor() {\n\n  }\n  getAllProjects(){\n    return mockData.projects;\n  }\n\n  getProjectById(id){\n    return mockData.projects.data.filter(item => item.id === id)[0];\n  }\n\n  getProjectApplications(projectId) {\n\n    const projectChildren = mockData.projects.data.filter(item => item.id === projectId)[0].children;\n    let projectApplications = [];\n\n    if (projectChildren) {\n    projectApplications = projectChildren.filter(item => item.nodeType === 'application');\n\n    }\n    console.log(projectApplications , 'projectApplications');\n    return projectApplications;\n  }\n\n  getProjectApplication(projectId , applicationId) {\n\n    const projectChildren = mockData.projects.data.filter(item => item.id === projectId)[0].children;\n    let projectApplications = [];\n\n    if (projectChildren) {\n    projectApplications = projectChildren.filter(item => item.nodeType === 'application');\n\n    }\n    const selectedApplication = projectApplications.filter(item => item.applicationId === Number(applicationId))[0];\n\n    console.log(selectedApplication , 'selectedApplication');\n    return selectedApplication;\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { UserService } from '../../../@core/services/user.service';\nimport { Observable } from 'rxjs';\nimport { Iuser } from '../../../@core/models/user.model';\nimport {HttpClient , HttpHeaders} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PublicService {\n\n  constructor(\n    private userService: UserService,\n    private http: HttpClient,\n\n  ) { }\n\n\n  login(credentials: any): Observable<any> {\n    const loginUrl = 'https://postman-echo.com/basic-auth';\n    console.log(loginUrl);\n\n    // const headers = new Headers();\n    console.log(this.userService.getToken());\n    const encodedToken = btoa(credentials.email+':'+credentials.password);\n\n    // headers.append('Authorization', `Basic ${encodedToken}`);\n\n\n    const headerDict = {\n      Authorization: 'Basic '+ encodedToken,\n    };\n    const requestOptions = {\n      headers: new HttpHeaders(headerDict),\n    };\n    // return this.http.post(\n    //   `${this.userService.baseUrl}/login`,\n    //   credentials\n    // );\n\n    return this.http.get(loginUrl , requestOptions);\n  }\n\n  signUp(user: Iuser): Observable<any> {\n    return this.http.post(\n      this.userService.baseUrl + `signup`,\n      user\n    );\n  }\n\n    // Change password http request - requires a slightly different headers object\n    changePassword(body: any, accessToken: string): Observable<any> {\n      const headers = new Headers();\n      body.token = accessToken['token'];\n      // console.log('body', body);\n      return this.http.post(\n        this.userService.baseUrl + `/reset-password`,\n        body,\n        // { headers: headers }\n      );\n    }\n\n    resetPassword(email: any): Observable<any> {\n      return this.http.post(\n        this.userService.baseUrl + `/forgot-password`,\n        email\n      );\n    }\n}\n"],"sourceRoot":""}